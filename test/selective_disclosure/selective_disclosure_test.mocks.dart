// Mocks generated by Mockito 5.4.5 from annotations
// in altme/test/selective_disclosure/selective_disclosure_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:altme/app/app.dart' as _i8;
import 'package:altme/dashboard/dashboard.dart' as _i2;
import 'package:altme/dashboard/home/tab_bar/credentials/models/activity/activity.dart'
    as _i4;
import 'package:credential_manifest/credential_manifest.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:oidc4vc/oidc4vc.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCredential_0 extends _i1.SmartFake implements _i2.Credential {
  _FakeCredential_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCredentialModel_1 extends _i1.SmartFake
    implements _i2.CredentialModel {
  _FakeCredentialModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CredentialModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialModel extends _i1.Mock implements _i2.CredentialModel {
  MockCredentialModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set receivedId(String? _receivedId) => super.noSuchMethod(
        Invocation.setter(
          #receivedId,
          _receivedId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String get shareLink => (super.noSuchMethod(
        Invocation.getter(#shareLink),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#shareLink),
        ),
      ) as String);

  @override
  _i2.Credential get credentialPreview => (super.noSuchMethod(
        Invocation.getter(#credentialPreview),
        returnValue: _FakeCredential_0(
          this,
          Invocation.getter(#credentialPreview),
        ),
      ) as _i2.Credential);

  @override
  List<_i4.Activity> get activities => (super.noSuchMethod(
        Invocation.getter(#activities),
        returnValue: <_i4.Activity>[],
      ) as List<_i4.Activity>);

  @override
  String get issuer => (super.noSuchMethod(
        Invocation.getter(#issuer),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#issuer),
        ),
      ) as String);

  @override
  bool get isVerifiableDiplomaType => (super.noSuchMethod(
        Invocation.getter(#isVerifiableDiplomaType),
        returnValue: false,
      ) as bool);

  @override
  bool get isDefaultCredential => (super.noSuchMethod(
        Invocation.getter(#isDefaultCredential),
        returnValue: false,
      ) as bool);

  @override
  bool get isEbsiCard => (super.noSuchMethod(
        Invocation.getter(#isEbsiCard),
        returnValue: false,
      ) as bool);

  @override
  bool get disAllowDelete => (super.noSuchMethod(
        Invocation.getter(#disAllowDelete),
        returnValue: false,
      ) as bool);

  @override
  String get getFormat => (super.noSuchMethod(
        Invocation.getter(#getFormat),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#getFormat),
        ),
      ) as String);

  @override
  String get getName => (super.noSuchMethod(
        Invocation.getter(#getName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#getName),
        ),
      ) as String);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i2.CredentialModel copyWith({
    String? id,
    String? image,
    Map<String, dynamic>? data,
    String? shareLink,
    _i2.Credential? credentialPreview,
    _i5.Display? display,
    String? expirationDate,
    _i6.CredentialManifest? credentialManifest,
    String? receivedId,
    String? challenge,
    String? domain,
    List<_i4.Activity>? activities,
    String? jwt,
    String? selectiveDisclosureJwt,
    _i2.PendingInfo? pendingInfo,
    String? format,
    Map<String, dynamic>? claims,
    Map<String, dynamic>? credentialSupported,
    String? profileLinkedId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #id: id,
            #image: image,
            #data: data,
            #shareLink: shareLink,
            #credentialPreview: credentialPreview,
            #display: display,
            #expirationDate: expirationDate,
            #credentialManifest: credentialManifest,
            #receivedId: receivedId,
            #challenge: challenge,
            #domain: domain,
            #activities: activities,
            #jwt: jwt,
            #selectiveDisclosureJwt: selectiveDisclosureJwt,
            #pendingInfo: pendingInfo,
            #format: format,
            #claims: claims,
            #credentialSupported: credentialSupported,
            #profileLinkedId: profileLinkedId,
          },
        ),
        returnValue: _FakeCredentialModel_1(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #id: id,
              #image: image,
              #data: data,
              #shareLink: shareLink,
              #credentialPreview: credentialPreview,
              #display: display,
              #expirationDate: expirationDate,
              #credentialManifest: credentialManifest,
              #receivedId: receivedId,
              #challenge: challenge,
              #domain: domain,
              #activities: activities,
              #jwt: jwt,
              #selectiveDisclosureJwt: selectiveDisclosureJwt,
              #pendingInfo: pendingInfo,
              #format: format,
              #claims: claims,
              #credentialSupported: credentialSupported,
              #profileLinkedId: profileLinkedId,
            },
          ),
        ),
      ) as _i2.CredentialModel);

  @override
  _i7.Future<_i8.CredentialStatus> checkRevocationStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkRevocationStatus,
          [],
        ),
        returnValue: _i7.Future<_i8.CredentialStatus>.value(
            _i8.CredentialStatus.pending),
      ) as _i7.Future<_i8.CredentialStatus>);

  @override
  _i7.Future<_i8.RevocationStatus> getRevocationStatus() => (super.noSuchMethod(
        Invocation.method(
          #getRevocationStatus,
          [],
        ),
        returnValue:
            _i7.Future<_i8.RevocationStatus>.value(_i8.RevocationStatus.active),
      ) as _i7.Future<_i8.RevocationStatus>);
}
